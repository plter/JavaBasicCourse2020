package top.yunp.oopdemo;

/**
 * 这里再讲 Java类！！
 *
 * 前面已经从实际应用的角度 讲解了 Java类!
 *  做的不那么仔细 不那么严谨
 *
 * 需要使用更加严谨的方式 方法 去看待 Java类
 *
 * 面临工作中：
 *      从需要解决的问题出发
 *      逐步分析出 问题处理中 需要参与的不同的角色
 *      张三 --->  学习  上课
 *      李四 --->  学习  上课
 *      王五 --->  讲课  批作业
 *      赵六 --->  讲课  批作业
 *
 *      对于这些角色 进行划分， 物以类聚人以群分
 *
 *      对于划分出来的这些小群体 ，将其中的各个个体 进行分析
 *      从其中获取公共的信息内容(属性特征、功能作用)
 *      将这些公共的内容 在Java 编程中 体现出来
 *      使用Java类进行提现。
 *
 *      如果多个Java类中 还具有更加相同的 属性特征 功能作用
 *      仍然可以做进一步 的 提取工作 把这些相同的内容 抽取出来
 *      形成一个单独的类，称为其他类的父类！
 *
 *      需要使用 继承 ： extends
 *
 *      Java类：
 *          实体性质：  成员变量较多  成员方法较少
 *          功能性质：  成员变量较少  成员方法较多
 *
 */

//在class 之前加上 abstract 表示当前这个类 称为了一个 抽象类！
public abstract class Person extends Object{

    /**            成员变量（属性特征）                     成员方法（能力 作用）
     * 张三（学生）
     *           姓名   年龄   性别   身高   学校  班级      学习能力   吃饭能力   睡觉能力
     *
     * 李四（老师）
     *           姓名   年龄   性别   身高   职称  学科      讲课能力   吃饭能力   睡觉能力
     *
     * 王五（工人）
     *           姓名   年龄   性别   身高   工种  工龄      劳动能力   吃饭能力   睡觉能力
     *
     * 赵六（白领）
     *           姓名   年龄   性别   身高   行业  特长      研究能力   吃饭能力   睡觉能力
     *
     * 小白（金毛）
     *           姓名   年龄   性别   身高   毛色            导盲
     *
     * TCL101(电视机)
     *
     *          品牌  生产厂家  尺寸  类型                  播放影像   播放声音
     */

    //Java类： 概括

    /**
     * Java的继承：
     *      extends  继承
     *
     * =======================================================================
     * 在继承关系的基础之上，我们是否可以更好的利用
     *
     *     1、子类可以继承父类的内容 减少代码的书写  做到简化
     *     2、从父类角度出发，是否可以制定一些规则，让子类来遵守
     *         既然是规则，那就没有具体的实现代码
     *
     *         自定义方法：
     *
     *         方法声明：  返回值类型  方法名称  形式参数列表
     *              在方法声明上 加入一个 abstract
     *         方法体：
     *              省略不写
     *
     * =======================================================================
     * 围绕问题的解决：
     *      Java类  ---> 实在 --->  对应的功能都有具体实现
     *      Java抽象类  ---> 有点不是在  --->  有部分功能没有具体的实现  只有方法声明
     *          1、一个Java类 继承 抽象类
     *              a、实现所有的抽象类 中 定义好的 抽象方法
     *              或
     *              b、将当前Java类 更改为 抽象的
     *
     *          2、抽象类 不能直接创建对象
     *              不能创建抽象类的对象，那么抽象类中已经定义的非static方法 怎么才能被调用呢？
     *
     *              如果想要使用抽象类中 非static方法，这个时候需要 通过其 子类来实现
     *              通过子类创建的对象 调用这些方法
     *
     *
     */

    public String name;
    public int age;
    public String sex;
    public double high;

    public int eat()
    {
        System.out.println("吃饭--Person -- 吃饱就行了 --- 馒头");

        return 0;
    }

    public void sleep()
    {
        System.out.println("睡觉--Person");
    }

    public static int sum(int a, int b)
    {
        return a+b;
    }
    public abstract void goodStudy();
//    {
//
//    }

//    public String toString() {
//        return getClass().getName() + "@" + Integer.toHexString(hashCode());
//    }
//    top.yunp.oopdemo.Person@2096442d
//
    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", sex='" + sex + '\'' +
                ", high=" + high +
                '}';
    }
}
